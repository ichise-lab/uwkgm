#!/bin/bash

source bin/libs/args
source bin/libs/files
source bin/libs/inputs
source packages/corenlp/conf/base
source packages/corenlp/package

packages.corenlp.install() {
    while true;
    do
        CHOICES=(
            "Package using Maven"
            "Build a Docker image"
            "Register the Docker image"
            "Deploy in a Kubernetes cluster"
        )

        VALUES=(
            mvn
            docker_build
            docker_register
            kube
        )

        args.pull INSTALL
        inputs.choices INSTALL "Install CoreNLP" "Choose installation" "mvn" "$INSTALL" "${CHOICES[@]}" "${VALUES[@]}"

        if [[ $INSTALL == "mvn" ]]; then
            packages.corenlp.install.mvn
        elif [[ $INSTALL == "docker_build" ]]; then
            packages.corenlp.install.docker_build
        elif [[ $INSTALL == "docker_register" ]]; then
            packages.corenlp.install.docker_register
        elif [[ $INSTALL == "kube" ]]; then
            packages.corenlp.install.kube
        elif [[ $INSTALL == "cancel" ]]; then
            return
        fi
    done
}

packages.corenlp.install.mvn() {
    rm -f packages/corenlp/payload/pom.xml
    cp packages/corenlp/templates/pom.xml.template packages/corenlp/payload/pom.xml

    files.text.replace "{{UWKGM_PKG_CORENLP_VERSION}}" "$UWKGM_PKG_CORENLP_VERSION" packages/corenlp/payload/pom.xml

    rm -r -f packages/corenlp/private/jar
    mkdir -p packages/corenlp/private/jar
    mvn -f packages/corenlp/payload package
    mv packages/corenlp/payload/target packages/corenlp/private/jar

    rm -f packages/corenlp/payload/pom.xml

    echo ""
    echo "[UWKGM: INFO] Completed packaging Stanford CoreNLP server using Maven"
    echo ""
}

packages.corenlp.install.docker_build() {
    rm -f packages/corenlp/Dockerfile
    cp packages/corenlp/templates/Dockerfile.template packages/corenlp/Dockerfile

    rm -f packages/corenlp/payload/pom.xml
    cp packages/corenlp/templates/pom.xml.template packages/corenlp/payload/pom.xml

    files.text.replace "{{UWKGM_PKG_CORENLP_VERSION}}" "$UWKGM_PKG_CORENLP_VERSION" packages/corenlp/payload/pom.xml
    files.text.replace "{{UWKGM_PKG_CORENLP_VERSION}}" "$UWKGM_PKG_CORENLP_VERSION" packages/corenlp/Dockerfile
    files.text.replace "{{UWKGM_PKG_CORENLP_PORT}}" "$UWKGM_PKG_CORENLP_PORT" packages/corenlp/Dockerfile

    sudo docker build -t uwkgm-corenlp:$UWKGM_PKG_CORENLP_VERSION packages/corenlp

    rm -f packages/corenlp/Dockerfile
    rm -f packages/corenlp/payload/pom.xml

    echo ""
    echo "[UWKGM: INFO] Completed building Stanford CoreNLP server"
    echo ""
}

packages.corenlp.install.docker_register() {
    sudo docker tag uwkgm-corenlp:$UWKGM_PKG_CORENLP_VERSION localhost:5000/uwkgm-corenlp:$UWKGM_PKG_CORENLP_VERSION
    sudo docker push localhost:5000/uwkgm-corenlp:$UWKGM_PKG_CORENLP_VERSION
    echo ""
    echo "[UWKGM: INFO] Completed registering Stanford CoreNLP server to Docker"
    echo ""
}

packages.corenlp.install.kube() {
    packages.corenlp.install.docker

    rm -r -f packages/corenlp/temp
    mkdir -p packages/corenlp/temp
    cp packages/corenlp/templates/corenlp.yaml.template packages/corenlp/temp/corenlp.yaml

    files.text.replace "{{UWKGM_PKG_CORENLP_VERSION}}" "$UWKGM_PKG_CORENLP_VERSION" packages/corenlp/Dockerfile
    
    kubectl apply -f packages/corenlp/temp/corenlp.yaml

    rm -r -f packages/corenlp/temp

    echo ""
    echo "[UWKGM: INFO] Completed deploying Stanford CoreNLP server to local Kubernetes cluster"
    echo ""
}