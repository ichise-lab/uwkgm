#!/bin/bash

source bin/libs/args
source bin/libs/inputs
source packages/corenlp/conf/base
source packages/corenlp/package

packages.corenlp.run() {
    while true;
    do
        CHOICES=(
            "Java (Maven package)"
            "Docker"
        )

        VALUES=(
            java
            docker
        )

        args.pull RUN
        inputs.choices RUN "Run CoreNLP" "Choose running method" "java" "$RUN" "${CHOICES[@]}" "${VALUES[@]}"

        if [[ $RUN == "java" ]]; then
            packages.corenlp.run.java
        elif [[ $RUN == "docker" ]]; then
            packages.corenlp.run.docker
        elif [[ $RUN == "cancel" ]]; then
            return
        fi
    done
}

packages.corenlp.run.java() {
    if [[ ! -f "packages/corenlp/private/jar/target/uwkgm-corenlp-$UWKGM_PKG_CORENLP_VERSION.jar" ]]; then
        echo "[UWKGM: ERROR] Missing CoreNLP's Maven package. Install the Stanford CoreNLP server (Maven) first, then try again."
        echo "[UWKGM: INFO] To install the server using UWKGM-CMS, run 'bash manage $UWKGM_ENV pkg opr corenlp install mvn'"
        echo ""
        return
    fi

    args.kwargs.get KWARGS_PARAMS "--kwargs"

    if [[ $UWKGM_INTERACTIVE == true ]]; then
        inputs.text "CoreNLP server's optional parameters" PARAMS
    else
        PARAMS="$KWARGS_PARAMS"
    fi

    echo "[UWKGM: INFO] Starting CoreNLP with parameters: $PARAMS"
    
    eval "java -jar packages/corenlp/private/jar/target/uwkgm-corenlp-$UWKGM_PKG_CORENLP_VERSION.jar $PARAMS"
}

packages.corenlp.run.docker() {
    args.kwargs.get PORT "--corenlp.port"

    if [[ $UWKGM_INTERACTIVE == true ]]; then
        inputs.text "CoreNLP server's port" PORT --default 8080
    fi

    sudo docker run --name uwkgm-corenlp -p "8080:$PORT" -d uwkgm-corenlp:0.1.0

    echo ""
    echo "[UWKGM: INFO] Executed Docker's run command"
    echo ""
}

packages.corenlp.site.run() {
    source packages/corenlp/conf/base
}
